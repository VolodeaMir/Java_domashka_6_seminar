// Задание на дом :
// • Подумать над структурой класса Ноутбук для магазина техники - выделить поля и методы. Реализовать в java.
// • Создать множество ноутбуков.
// • Написать метод, который будет запрашивать у пользователя критерий (или критерии) фильтрации и выведет ноутбуки, отвечающие фильтру. Критерии фильтрации можно хранить в Map. Например:
// “Введите цифру, соответствующую необходимому критерию:
// 1 - ОЗУ
// 2 - Объем ЖД
// 3 - Операционная система
// 4 - Цвет …
// • Далее нужно запросить минимальные значения для указанных критериев - сохранить параметры фильтрации можно также в Map.
// • Отфильтровать ноутбуки их первоначального множества и вывести проходящие по условиям.

import java.util.*;

public class МагазинТехники {
    private Set<Ноутбук> ноутбуки;

    public МагазинТехники() {
        ноутбуки = new HashSet<>();
    }

    // ***************************************************************
    public void добавитьНоутбук(Ноутбук ноутбук) {
        ноутбуки.add(ноутбук);
    }

    // ***************************************************************
    public void фильтроватьНоутбуки(Map<Integer, Object> критерии) {
        List<Ноутбук> результаты = new ArrayList<>();

        for (Ноутбук ноутбук : ноутбуки) {
            boolean соответствует = true;

            for (Map.Entry<Integer, Object> entry : критерии.entrySet()) {
                int критерий = entry.getKey();
                Object значение = entry.getValue();

                switch (критерий) {
                    case 1: // ОЗУ
                        if (ноутбук.getОзу() < (int) значение) {
                            соответствует = false;
                        }
                        break;
                    case 2: // Объем ЖД
                        if (ноутбук.getОбъемЖД() < (int) значение) {
                            соответствует = false;
                        }
                        break;
                    case 3: // Операционная система
                        if (!ноутбук.getОперационнаяСистема().equals(значение)) {
                            соответствует = false;
                        }
                        break;
                    case 4: // Цвет
                        if (!ноутбук.getЦвет().equals(значение)) {
                            соответствует = false;
                        }
                        break;
                }
            }

            if (соответствует) {
                результаты.add(ноутбук);
            }
        }

        // ***************************************************************
        if (результаты.isEmpty()) {
            System.out.println("Ноутбуки, соответствующие заданным критериям, не найдены.");
        } else {
            System.out.println("Результаты фильтрации:");
            for (Ноутбук ноутбук : результаты) {
                System.out.println(ноутбук);
            }
        }
    }

    public static void main(String[] args) {
        МагазинТехники магазин = new МагазинТехники();

        // ***************************************************************
        магазин.добавитьНоутбук(new Ноутбук("Модель 1", 8, 500, "Windows", "Серый"));
        магазин.добавитьНоутбук(new Ноутбук("Модель 2", 16, 1000, "Windows", "Черный"));
        магазин.добавитьНоутбук(new Ноутбук("Модель 3", 8, 1000, "MacOS", "Серебристый"));
        магазин.добавитьНоутбук(new Ноутбук("Модель 4", 16, 500, "MacOS", "Серый"));

        // ***************************************************************
        Map<Integer, Object> критерии = new HashMap<>();
        критерии.put(1, 8); // ОЗУ не менее 8
        критерии.put(2, 800); // Объем ЖД не менее 800

        // ***************************************************************
        магазин.фильтроватьНоутбуки(критерии);
    }
}
